using System;
using System.Linq;
using ChessChallenge.API;

public class MyBotOld : IChessBot
{
  class State { public Move Move; public State[] Children; public State Parent; public int Visits = 1; public float TotalScore; }
  float Score(State state) => -state.TotalScore / MathF.Pow(state.Visits, 1f);

  public Move Think(Board board, Timer timer)
  {
    State root = new State() { Move = default };

    do
    {
      State currentState = root;

      while (currentState.Children != null)
      {
        if (currentState.Children.Length == 0) break;

        currentState = currentState.Children.MinBy(Score);

        board.MakeMove(currentState.Move);
      }

      if (currentState.Children == null) currentState.Children = board.GetLegalMoves().Select(move => new State() { Move = move, TotalScore = Evaluate(move), Parent = currentState }).ToArray();

      float score = currentState.Children.Length == 0 ? (board.IsDraw() ? 0 : -100) : currentState.Children.MinBy(Score).TotalScore;

      while (currentState.Parent != null)
      {
        currentState.Visits++;

        currentState.TotalScore += score *= -1;

        board.UndoMove(currentState.Move);

        currentState = currentState.Parent;
      }

      // DebugState(root);
      // Console.WriteLine("\n");
    } while (timer.MillisecondsElapsedThisTurn < timer.MillisecondsRemaining / 60f);

    return root.Children.MinBy(Score).Move;

    float Evaluate(Move move)
    {
      board.MakeMove(move);

      int moveSide = board.IsWhiteToMove ? 1 : -1;

      for (int i = 0; i < 36; i++)
      {
        Array.Copy(_emptyTensor, _sightTensor, 54);

        for (int kernelI = 0; kernelI < 9; kernelI++)
        {
          Piece piece = board.GetPiece(new Square(i / 6 + kernelI / 3, i % 6 + kernelI % 3));

          if (piece.PieceType != PieceType.None) _sightTensor[kernelI / 3 * 18 + kernelI % 3 * 6 + (int)piece.PieceType - 1] = moveSide;
        }

        parameterOffset = 0;

        Array.Copy(_sightTensor, _layerInput, 54);

        Layer(54, 16);
        Layer(16, 16);
        Layer(16, 2);

        Array.Copy(_layerOutput, 0, _evaluationTensor, i * 2, 2);
      }

      _evaluationTensor[72] = moveSide;

      Array.Copy(_evaluationTensor, _layerInput, 73);

      Layer(73, 34);
      Layer(34, 34);
      Layer(34, 1);

      int evaluation = 0;

      for (int type = 1; type < 7; type++)
      {
        evaluation += board.GetPieceList((PieceType)type, true).Count * pieceValues[type];
        evaluation -= board.GetPieceList((PieceType)type, false).Count * pieceValues[type];
      }

      board.UndoMove(move);

      return (_layerOutput[0] + evaluation) * -moveSide;
    }
  }
  int parameterOffset = 0;

  float[] _parameters = new float[4927], _layerInput = new float[73], _layerOutput = new float[34], _evaluationTensor = new float[73], _sightTensor = new float[54], _emptyTensor = new float[73];

  void Layer(int previousLayerSize, int layerSize)
  {
    Array.Copy(_emptyTensor, _layerOutput, 16);

    for (int nodeIndex = 0; nodeIndex < layerSize; nodeIndex++)
    {
      for (int weightIndex = 0; weightIndex < previousLayerSize; weightIndex++) _layerOutput[nodeIndex] += _layerInput[weightIndex] * _parameters[parameterOffset + nodeIndex * previousLayerSize + weightIndex];

      _layerOutput[nodeIndex] = MathF.Max(MathF.Min(_layerOutput[nodeIndex] + _parameters[parameterOffset + layerSize * previousLayerSize + nodeIndex], 1), -1);
    }

    parameterOffset += layerSize * previousLayerSize + layerSize;

    Array.Copy(_layerOutput, _layerInput, layerSize);
  }

  int[] pieceValues = { 0, 1, 3, 3, 5, 9, 1000 };

  public MyBotOld()
  {
    for (int parameter = 0; parameter < 4927; parameter++)
    {
      var ints = decimal.GetBits(_compressedParameters[parameter / 16]);
      int bits = parameter % 16 * 6, bitsOffset = bits % 32, intIndex = bits / 32, quantized = ints[intIndex] >> bitsOffset & 0b111111;
      if (bitsOffset > 27) quantized |= ints[intIndex + 1] << 32 - bitsOffset & 0b111111;

      _parameters[parameter] = MathF.Pow(quantized / 64f - 0.5f, 3) * 6f;
    }
  }


  decimal[] _compressedParameters = { 57267001548359885232952640496M, 30063955301108901016177032527M, 45285991138826390619103111951M, 16329054464551117453515891603M, 52335938823465377490411264651M, 57063467156620603022437557135M, 23244997587558340288079258581M, 60323777197780159585933937514M, 18942231863733137999395506833M, 21825225800961859800476988909M, 65344230018963854012233967315M, 15837747994390755716618784696M, 46039736266953753783319865710M, 14503804557128148412039324560M, 54607222454326651807388447818M, 8842571700165764489280539599M, 15082577867114902855067036678M, 33446199291173898845227069771M, 12618240583864286878909121617M, 13797211258122681817826638530M, 59539045296706041066456097101M, 17801218991408380094594982733M, 61034121264845967634327755724M, 65951199536946266086804747379M, 20536252318071843251664892718M, 26449716539924142354791828324M, 21367288576304806916896528937M, 25073826657598170218898215726M, 53672466025919887623294633233M, 54260447241307543518383519088M, 15954544006037201947928233709M, 17084468027420940034176500402M, 20867537317610538184747475958M, 58672079952341647848933636492M, 62685771072193978963903845745M, 21961172547692645162571589992M, 53564984833215119610922981806M, 15152129404148521337071658041M, 53409509973441705852545024587M, 12674164391442273285484098257M, 25139320015135659166827862666M, 49577789400780189635909855762M, 6288880598797846235051259021M, 16524509896377395105194879872M, 22501373936106525504141581330M, 61214456550045272896493409457M, 21888708565029420917526168883M, 62200247086938184806443443048M, 57956604307689153494406092369M, 15199889171802063423017399731M, 49577189364425814047547530248M, 11398449766826013591538299850M, 54695436330432207252806265414M, 55728222673721367975349752277M, 42620262020510847934717638435M, 31420390785035471637642401320M, 24224201552289260639755797211M, 1939731484942322537119003539M, 22986568394188124878001775320M, 27595981696341762157234813546M, 56415684085527836618176220455M, 49890117757527941653441357422M, 32586485257183477691719775957M, 44076966265544540656918759955M, 21556013148661629483652383845M, 51168877928985069216701683309M, 32644485357426118325271693847M, 42445865617732571298737780904M, 22967220931341062150961332951M, 26705669028453802399918561881M, 55236381657024953451908070615M, 45251129583472964547768379105M, 26530918803775470694109387291M, 65053646187326083505918894882M, 57746980259800944892734425305M, 29897416916914159192539851697M, 29232503326123114567685938322M, 26920325736774445572672890352M, 54094468128720109136821818714M, 13959980193248717145068968790M, 51232950152694742211041365267M, 20653358035819515457266686617M, 16397334479097227793584176274M, 8783824399422275359067259825M, 18263205259575250697744712176M, 18253028859535243758341936301M, 12634097671538440642528310229M, 25584983840274850566870053172M, 51072164127841366268133409877M, 18998796731987485209861098546M, 62743356833382498621346192361M, 57791271637686064929512827666M, 7759614420780652296062975150M, 14664341823186320233689448838M, 51030667430414057574865753136M, 13254891075614165094985278314M, 53987104646594462366066491980M, 24261108934179157463519148687M, 62201263027156071266213244141M, 16506556281283100714561510702M, 62752535564262886670755100203M, 14541895468360596382766681429M, 16291736095439646234682069456M, 23816505481558865541530363383M, 51640250575396265781893090320M, 8843548469316012732172768367M, 15286339459315388623343129941M, 51660940966486366703125357456M, 21928647908192291324262698266M, 17771928326604141189912685227M, 28187105538450736680145715819M, 56584425984101475329640166933M, 52276725528497571491075781972M, 21985034990059888759438654354M, 59666582325161163466953798514M, 32302508537779185347382299561M, 62417392078731031883556899824M, 35103674891079906491406929298M, 70795969874422567673890512980M, 59045242101509187133549628554M, 49995820259335778707858052241M, 57801816347890871974088357036M, 28194649482716177187829531951M, 33177421711103300871117274130M, 17016921054725567395168451059M, 17731238233310665763661904744M, 66508679464671458846920852653M, 18883504847426918079142904946M, 25056292141416598499006257641M, 52973856174711988489180607921M, 60375367069726796086322574605M, 60955053309324632218755212815M, 45537131430573503256908077961M, 50953607707786321037937665269M, 64512856612207331965508538563M, 28789416736997712070213975440M, 57288186054380959079598441643M, 45892362882013468083251348042M, 52219448639113773584011406353M, 52355364906451637860478384690M, 28206886731070267154969064624M, 21962193608963139695664108888M, 52433418471634217070012197902M, 18940147864844250645298603159M, 55326095048808698696220621651M, 18988667773579654447077675693M, 53584923120406601474001163865M, 69631982721423875259130653480M, 54812771342804265651643288854M, 60248406469932231800896916426M, 73248148765569751717630626744M, 57279685438000402889718709843M, 29298826123272103429868181904M, 21456434605820192794460103639M, 26396414823824404829795150697M, 58968606667396686833862124367M, 35605678824596252602844918863M, 53720647997200624808412928937M, 53573598123525975190743370519M, 48003791493236459091918251854M, 19510630874637690986203667438M, 23845062033343439606177688594M, 23776786467589184859482784938M, 56042064443055740957265941807M, 30092060800763207233900223569M, 49125710064847603919313095462M, 31263188443379957420451260912M, 60917249291139873003418535275M, 60963284949488274204840768842M, 20188222069701518781407724942M, 24298895543498217589815575472M, 20103144099719731133006134286M, 47339597548980377889832016492M, 54105969402866651246941248658M, 28768291714396820807900645806M, 58577189342648059167177008273M, 47938535027638925681486050351M, 19542223319210519069590353137M, 58585200242433453571538105513M, 62820528272885298587319317799M, 50236186096180180279339179055M, 57298920101673174233217057519M, 31385767821409414391456934932M, 33689326306991932571249339755M, 23238064942911268599023057998M, 49183129139740524161817433645M, 64706497142130163380346209936M, 27054476527980478951994489906M, 19689140834090509581541258542M, 23216155424914785702653150776M, 31921189368921865483509224109M, 14677215581072115401687240241M, 47384552972101857291549775099M, 54088770740634532813214737643M, 45524903395963600390122444235M, 28170131022777146564479752683M, 49357798139204086687463171341M, 27501956380577590931231261912M, 63979199276134114777657694957M, 15219541927073794960387911019M, 16533676975967941806436309524M, 52393514324948422851866844009M, 59144501577129660998784047828M, 21271240735714486478473882283M, 20264195160482700285831469803M, 31882180597233864616717903152M, 29880500248048071904408983286M, 73835502545159761034867744838M, 20063083594257595574165761679M, 64678840564064252848788810736M, 24917816529470524470399705483M, 23875138601008183634766280432M, 57326448377365055965561944596M, 56430313696761923448582494704M, 21966978176236148261811960846M, 18228293641185430345855290313M, 58894531948355391897014015215M, 18185649875945824830050900500M, 25712703891512487638269067797M, 59735823169849828972863102381M, 61486185357905426781552588076M, 52992614846039949100594321046M, 55448947423975220800547910864M, 20846009791880554603394292621M, 11319494211363067553437240332M, 63362320645001934399505212498M, 11330113548268878161702585353M, 18826041245470290963624424715M, 64659466830728893657280482281M, 45350931862155798715704293125M, 30167708059500820582948305941M, 50026392614515442955603784983M, 31813054324447870947049440940M, 57338952039802248673296291228M, 26415724794150671023975258454M, 25582885076425315385204438377M, 30555507511547619511480517870M, 48809391321463376378143853142M, 51226552261095957804327277733M, 49143031603488056454114620578M, 32734177070685922380603099803M, 47459186101257570251974298283M, 26390145360406688374902920682M, 54920793276865780964849514006M, 27634715746437925851261655572M, 50362549324421052314270472684M, 45011470495447243204900000855M, 28044785592016285857376215145M, 50432558184741048295086523606M, 51214231663826910745894413864M, 46378806780981222304630876824M, 49063849715207938726611735899M, 42915545984230494378369324779M, 24320481822598475597720984299M, 53747532194311953356439578258M, 57746937039788985533135754715M, 30491028242584485775646287274M, 46241807115347571818388613864M, 23979144840519888515231210283M, 51281611363586340812962171305M, 49985646487531582237476018295M, 63684516064380446417981886948M, 63630772077097027303771768357M, 30128049301901041555034187430M, 25578331060622515217814866394M, 30180704155945497822920594903M, 28117685744206239583424145900M, 52872874363461400322847176986M, 27672799941597338856503518676M, 31381705971688936492053120410M, 44983702791525969091549627694M, 51173024091666288192753580827M, 45060794446878696831993595542M, 53703395243635782474526468756M, 52799440236524276406783944150M, 50413289969525579331839572181M, 52696978904829348382270469611M, 53624522495372367931823281683M, 32565327647760058982633391395M, 27744973171379082616059876904M, 49098621950315770019551749275M, 50130109892237835060849842662M, 27635044766027933819736262379M, 28962328780583481401155099091M, 56086712432711333795082098263M, 26531484440415444782912456345M, 49954433281833049896067455572M, 28904111176835149163657069614M, 45757140821506124628309121575M, 32948377686778854764100138362M, 30518910294972260449910356135M, 25500564999076773002576558744M, 52871282678173670826688288042M, 30456266538414337325085918360M, 57864731913083966405365565976M, 27691553908536303358915222057M, 27628976525922665285828045275M, 56552122309879919132712717030M, 30531003162302755135900784983M, 26795738789736112399732881963M, 48718389937710376357632292116M, 57266009835540192751809632726M, 30536066411069373308878039388M, 51599869424933947622282664535M, 48673349319608555413299940183M, 32659255318407228003961939349M, 48983678626111323745186637337M, 746953568566711509554194214M, };

  // void DebugState(State state, int depth = 0)
  // {
  //   // if (depth == 2) return;

  //   Console.WriteLine(new string('\t', depth) + $"{state.Move} {Score(state)} {state.TotalScore} {state.Visits}");

  //   if (state.Children == null) return;

  //   foreach (State child in state.Children) DebugState(child, depth + 1);
  // }
}