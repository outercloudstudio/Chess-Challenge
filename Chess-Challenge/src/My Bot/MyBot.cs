using System;
using System.Linq;
using ChessChallenge.API;

public class MyBot : IChessBot
{
  class State { public Move Move; public State[] Children; public State Parent; public int Visits = 1; public float TotalScore; }
  float Score(State state) => -state.TotalScore / MathF.Pow(state.Visits, 1f);

  public Move Think(Board board, Timer timer)
  {
    State root = new State() { Move = default };

    do
    {
      State currentState = root;

      while (currentState.Children != null)
      {
        if (currentState.Children.Length == 0) break;

        currentState = currentState.Children.MinBy(Score);

        board.MakeMove(currentState.Move);
      }

      if (currentState.Children == null) currentState.Children = board.GetLegalMoves().Select(move => new State() { Move = move, TotalScore = EvaluateMove(move), Parent = currentState }).ToArray();

      float score = currentState.Children.Length == 0 ? (board.IsDraw() ? 0 : -100) : currentState.Children.MinBy(Score).TotalScore;

      while (currentState.Parent != null)
      {
        currentState.Visits++;

        currentState.TotalScore += score *= -1;

        board.UndoMove(currentState.Move);

        currentState = currentState.Parent;
      }

      // DebugState(root);
      // Console.WriteLine("\n");
    } while (timer.MillisecondsElapsedThisTurn < timer.MillisecondsRemaining / 60f);

    return root.Children.MinBy(Score).Move;

    float EvaluateMove(Move move)
    {
      board.MakeMove(move);

      float evaluation = -Evaluate();

      board.UndoMove(move);

      return evaluation;
    }

    float Evaluate()
    {
      for (int x = 0; x < 6; x++)
      {
        for (int y = 0; y < 6; y++)
        {
          Array.Copy(_emptyTensor, _sightTensor, 54);

          for (int kernelX = 0; kernelX < 3; kernelX++)
          {
            for (int kernelY = 0; kernelY < 3; kernelY++)
            {
              Piece piece = board.GetPiece(new Square(x + kernelX, y + kernelY));

              if (piece.PieceType != PieceType.None) _sightTensor[kernelX * 18 + kernelY * 6 + (int)piece.PieceType - 1] = piece.IsWhite ? 1 : -1;
            }
          }

          parameterOffset = 0;

          Array.Copy(_sightTensor, _layerInput, 54);

          Layer(54, 12);
          Layer(12, 12);
          Layer(12, 2);

          _evaluationTensor[(x * 6 + y) * 2] = _layerOutput[0];
          _evaluationTensor[(x * 6 + y + 1) * 2] = _layerOutput[1];
        }
      }

      _evaluationTensor[72] = board.IsWhiteToMove ? 1 : -1;

      Array.Copy(_evaluationTensor, _layerInput, 73);
      Layer(73, 32);
      Layer(32, 32);
      Layer(32, 1);

      int evaluation = 0;

      for (int type = 1; type < 7; type++)
      {
        evaluation += board.GetPieceList((PieceType)type, true).Count * pieceValues[type];
        evaluation -= board.GetPieceList((PieceType)type, false).Count * pieceValues[type];
      }

      return (_layerOutput[0] + evaluation) * (board.IsWhiteToMove ? 1 : -1);
    }
  }

  // void DebugState(State state, int depth = 0)
  // {
  //   // if (depth == 2) return;

  //   Console.WriteLine(new string('\t', depth) + $"{state.Move} {Score(state)} {state.TotalScore} {state.Visits}");

  //   if (state.Children == null) return;

  //   foreach (State child in state.Children) DebugState(child, depth + 1);
  // }

  int[] pieceValues = { 0, 1, 3, 3, 5, 9, 1000 };

  public MyBot()
  {
    for (int parameter = 0; parameter < 4299; parameter++)
    {
      var ints = decimal.GetBits(_compressedParameters[parameter / 16]);
      int bits = parameter % 16 * 6, bitsOffset = bits % 32, intIndex = bits / 32, quantized = ints[intIndex] >> bitsOffset & 0b111111;
      if (bitsOffset > 27) quantized |= ints[intIndex + 1] << 32 - bitsOffset & 0b111111;

      _parameters[parameter] = MathF.Pow(quantized / 64f - 0.5f, 3) * 6f;
    }
  }

  int parameterOffset = 0;

  float[] _parameters = new float[4299], _layerInput = new float[73], _layerOutput = new float[32], _evaluationTensor = new float[73], _sightTensor = new float[54], _emptyTensor = new float[73];

  void Layer(int previousLayerSize, int layerSize)
  {
    Array.Copy(_emptyTensor, _layerOutput, 16);

    for (int nodeIndex = 0; nodeIndex < layerSize; nodeIndex++)
    {
      for (int weightIndex = 0; weightIndex < previousLayerSize; weightIndex++)
      {
        _layerOutput[nodeIndex] += _layerInput[weightIndex] * _parameters[parameterOffset + nodeIndex * previousLayerSize + weightIndex];
      }

      _layerOutput[nodeIndex] = MathF.Max(MathF.Min(_layerOutput[nodeIndex] + _parameters[parameterOffset + layerSize * previousLayerSize + nodeIndex], 1), -1);
    }

    parameterOffset += layerSize * previousLayerSize + layerSize;

    Array.Copy(_layerOutput, _layerInput, layerSize);
  }

  decimal[] _compressedParameters = { 10081613488862244255913783888M, 15179033052458341836986054020M, 60914207720520171861428695371M, 67280574136771457158925816464M, 26396305506020586049217307702M, 55707632640535332183070047212M, 5169152748727424039997457613M, 18815740652863198266963573125M, 53349047591172131226450952655M, 11396021522790394259536157200M, 13902963486418148397427784779M, 48358903815142429100985573710M, 14576984835745288268127492940M, 62906222317135492061442251212M, 17528910622049555869673418228M, 6385282846991434904677078000M, 55286619875973341150997832450M, 19746541271290084990923812466M, 67811597151224801675493714800M, 64016796036608954162525699000M, 58594288445932379959115587054M, 15112245027694238594431751017M, 28853773075479810191462829389M, 25897541961995161926805566221M, 69108170092781000788343192813M, 61070969810905449303322860088M, 22125107533260843955531775541M, 6484138643381218259588934231M, 22491786638522094718592019587M, 20022322113971222119373902291M, 10120275538635731072670139732M, 18774037582062948742449126408M, 59618536927469625943366066636M, 8970318210295022158033267539M, 45400931520837800226341843592M, 18707755409968508469693674128M, 6579654778661075231871133004M, 65335868518005368942440650183M, 20266350884315386854735055922M, 63962988971152163605777173669M, 32952184292394027103177878583M, 66439758901478443769090909795M, 60169051601093556855696686579M, 54919593347030802477146907623M, 68555588905977683210837373648M, 47896053168695272143793230151M, 13988229622990765850576253580M, 16395825760291221759289130617M, 13925270436912324843593856203M, 61029554661463206152604656495M, 30528879066968525036270619961M, 15624843757316756724074265715M, 16629462618251522977556149003M, 58534895973740536241415083367M, 27655470555255110803786664495M, 60356597911098866264868042197M, 57298435988124363260856568237M, 22613327147617733866532811797M, 51135853579503117996331695022M, 49124014850025421728110785876M, 50276267694116597633094607438M, 13890578050055925399389010575M, 18962219942316701044801835981M, 15168303548595154489024774936M, 23159501510623029769757610889M, 14068034108153587125456902929M, 5072417304698915585819189803M, 62160596065051560419652875593M, 17818755462978022724884584847M, 13864028986573063767449184848M, 18734747708504031875778769804M, 55247547489688957871513977555M, 23255405795329120075129472428M, 55482643174025207662424687856M, 60855140057338642064398665524M, 62861350657721183996176696399M, 59104016285709767953953791671M, 57925883030401216782790243444M, 23186189423019182968586550511M, 24640280218015123053111622895M, 62310084908886789596344634286M, 60941411199731372146336880014M, 43787369833000223859478965607M, 61486740159989157883905915342M, 56039525869443576893047731383M, 62296481681956763077525289967M, 28071048804008280382753260717M, 26372526475977117562975380497M, 22644504462796389364094815023M, 46708250353773257890729523924M, 54947245123169890108978328977M, 19028744143761019312936889551M, 66573029139205684329619970897M, 59221294238501541700335242667M, 23952554156255401607215569453M, 66566101314829073967675024877M, 52928985297737227369873615383M, 25653333718955060965254531987M, 67966951121746495304960535797M, 62317612495890078493308689518M, 23934855176498117712929447084M, 64019057501308859043264298225M, 21859918849826284670197866031M, 59840712655907593065442755403M, 30072396950818624035357514959M, 62310847682922499306373695954M, 50429789612432854008469476654M, 11417157879395166119879286103M, 13852841141145033991143621189M, 17547342307895521023247164081M, 15788983257425648343196435661M, 11955724378905514061183365844M, 22638107393036226916861428489M, 59764236135191124221912349542M, 18842066155140393637626075665M, 62096825378973782464650082714M, 60461047473034372168447488843M, 66612926004449872783901445684M, 59124887085465900702418136172M, 66351080198887245685243431857M, 69187059944483241525719010647M, 19452762481632731805385936152M, 18988426790114519355389983404M, 56585063207389677700801554927M, 29335609080158194390318859311M, 24348576753731921290515119278M, 26333840773998924204612433256M, 58925380820020718392839058479M, 60303427972980547090615452759M, 35015721154763475625622983888M, 31226017073407897293285321259M, 34977655546134924994306177554M, 57888002416546806274271267602M, 25555852988336347253001856143M, 15264843589986362774761059605M, 26358740376606835993707598736M, 15170121582410987276069860717M, 20573000145953946075543442892M, 18070934411471197055863678482M, 54831370032092616657279435377M, 23805365595869176540250936525M, 52887880540659340131620803986M, 31301395215469681693212595220M, 10025382401416238420739004627M, 30450958004439588689954513357M, 15864621394410462901009839277M, 15169649388824996042595672920M, 13909386049454049309566509911M, 60346667116238496289853101074M, 56705200877733857002283814389M, 59181985133915430621500359602M, 15773268943154876218114378775M, 22125418849053483969478073392M, 62259612779417135521866657145M, 64697095021718700299761130447M, 61718896410575503947837111632M, 70212545217915683055005138032M, 28942062587879818698213121173M, 48564744715315497501439900303M, 31223618476216745553838261201M, 23147367320783186240212902797M, 16293376556598055081266973076M, 56497013135891309119719844680M, 62725474145346813944462994574M, 60284225834110731022275763091M, 72781786221257864173925362744M, 64174570420850867305200148073M, 26834717134528804742180568356M, 66506240451719284973277211505M, 54086969160687746852584609262M, 19503806621186427494918415465M, 22401798106540671711708138612M, 18206509664397424181572744361M, 60151097678569317007016768939M, 58516466236971905234385032430M, 52977444272346512914928169835M, 18999101180646304348889742454M, 55463912081058318428987671343M, 20690292186401791870271409457M, 49939466718638030446349401324M, 50500261003976892578186884113M, 31291442685253271348874097912M, 15076295463199366366796252301M, 52201503753531677787067073831M, 67672899096162006610615039187M, 23098573877995836082687798069M, 18284896157570006913001396905M, 19068298513024049724473137844M, 59259696077829522326504806932M, 17510450524772402926815438098M, 17644509434767276539183911440M, 16619741692390915433529537295M, 26414798705951392560785179599M, 8880850263375770137371145001M, 62135821938854081997259444524M, 47358208972288430874400742163M, 8950193564234916628066778058M, 22421735649511890557854626895M, 57240728436810414264313263365M, 51072778998879827620619821975M, 52469294431702855634699600919M, 25656028158686299285889652969M, 62753907122911885925902354917M, 54132200575464013285680134997M, 65923402929730255288032109842M, 27400816763917646674390330145M, 28932132297553547819840017652M, 49020616375454404799909173976M, 22701682802368713604547926896M, 62639808098582013168484166186M, 64006942274701562762089105967M, 54808868694092033354777042153M, 28051785760919178743672703861M, 32488260348701766734967298649M, 56062330711218196086675647322M, 52935345065905370482329330854M, 21476678583875244821346433637M, 53913767662542607011542805402M, 55179092137753953363467346836M, 22643967859251758471171372461M, 52366905856454302208165579055M, 59066819870533785726858138722M, 22734372572131160582248899985M, 57324383446920533286370768213M, 56572393683314555901874717971M, 54126816712669463190592641517M, 26407984987695950979382568107M, 20183128026009963350886900827M, 24417348848523642036027995291M, 28871752316807024295480050906M, 47404467885182153879008929188M, 52933923394908889050806827861M, 21843602673400083263752054298M, 49877741882670815187451880683M, 56079266587679644646830598764M, 22702010267299048398845196780M, 24339399102652839125174376595M, 53574649757302829679851256362M, 28077994970995022929851931370M, 17730501544006785091249822289M, 10884489631266194358123547307M, 16003634291761361435881425940M, 25170830610373776334077606218M, 20594578199631474253853005010M, 25139411324682685003720362768M, 57318688367404385895172360616M, 20151193586465890170719890155M, 20885627976119926448844106668M, 68921561605202027110885537103M, 58390714251168749364118696852M, 60201084951368168630237987893M, 21845486455979468081241081066M, 50257930040617012805904500119M, 20278916655214625641550509161M, 51611991646202746966587046448M, 28730630845511218336318015079M, 56583974602225124514540993322M, 21907349377324735322311001578M, 51575110279991106972808979687M, 17665912849868276748863752939M, 46641461334861270553033366122M, 17627841781244225788735505771M, 23140269559514398556450276904M, 26350188363991479711491347801M, 58970271037133338565153044134M, 30689986050500964380667184553M, 16820462113545190908882647720M, 34399547038778158928044071256M, 24686918651227466726M };
}