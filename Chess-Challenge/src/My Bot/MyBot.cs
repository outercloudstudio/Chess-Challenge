using System;
using System.Linq;
using ChessChallenge.API;

public class MyBot : IChessBot
{
  class State { public Move Move; public State[] Children; public State Parent; public int Visits = 1; public float TotalScore; }
  float Score(State state) => -state.TotalScore / MathF.Pow(state.Visits, 1f);

  public Move Think(Board board, Timer timer)
  {
    State root = new State() { Move = default };

    do
    {
      State currentState = root;

      while (currentState.Children != null)
      {
        if (currentState.Children.Length == 0) break;

        currentState = currentState.Children.MinBy(Score);

        board.MakeMove(currentState.Move);
      }

      if (currentState.Children == null) currentState.Children = board.GetLegalMoves().Select(move => new State() { Move = move, TotalScore = Evaluate(move), Parent = currentState }).ToArray();

      float score = currentState.Children.Length == 0 ? (board.IsDraw() ? 0 : -100) : currentState.Children.MinBy(Score).TotalScore;

      while (currentState.Parent != null)
      {
        currentState.Visits++;

        currentState.TotalScore += score *= -1;

        board.UndoMove(currentState.Move);

        currentState = currentState.Parent;
      }

      // DebugState(root);
      // Console.WriteLine("\n");
    } while (timer.MillisecondsElapsedThisTurn < timer.MillisecondsRemaining / 60f);

    return root.Children.MinBy(Score).Move;

    float Evaluate(Move move)
    {
      board.MakeMove(move);

      int moveSide = board.IsWhiteToMove ? 1 : -1;

      for (int i = 0; i < 36; i++)
      {
        Array.Copy(_emptyTensor, _sightTensor, 54);

        for (int kernelI = 0; kernelI < 9; kernelI++)
        {
          Piece piece = board.GetPiece(new Square(i / 6 + kernelI / 3, i % 6 + kernelI % 3));

          if (piece.PieceType != PieceType.None) _sightTensor[kernelI / 3 * 18 + kernelI % 3 * 6 + (int)piece.PieceType - 1] = moveSide;
        }

        parameterOffset = 0;

        Array.Copy(_sightTensor, _layerInput, 54);

        Layer(54, 16);
        Layer(16, 16);
        Layer(16, 2);

        Array.Copy(_layerOutput, 0, _evaluationTensor, i * 2, 2);
      }

      _evaluationTensor[72] = moveSide;

      Array.Copy(_evaluationTensor, _layerInput, 73);

      Layer(73, 34);
      Layer(34, 34);
      Layer(34, 1);

      int evaluation = 0;

      for (int type = 1; type < 7; type++)
      {
        evaluation += board.GetPieceList((PieceType)type, true).Count * pieceValues[type];
        evaluation -= board.GetPieceList((PieceType)type, false).Count * pieceValues[type];
      }

      board.UndoMove(move);

      return (_layerOutput[0] + evaluation) * -moveSide;
    }
  }
  int parameterOffset = 0;

  float[] _parameters = new float[4927], _layerInput = new float[73], _layerOutput = new float[34], _evaluationTensor = new float[73], _sightTensor = new float[54], _emptyTensor = new float[73];

  void Layer(int previousLayerSize, int layerSize)
  {
    Array.Copy(_emptyTensor, _layerOutput, 16);

    for (int nodeIndex = 0; nodeIndex < layerSize; nodeIndex++)
    {
      for (int weightIndex = 0; weightIndex < previousLayerSize; weightIndex++) _layerOutput[nodeIndex] += _layerInput[weightIndex] * _parameters[parameterOffset + nodeIndex * previousLayerSize + weightIndex];

      _layerOutput[nodeIndex] = MathF.Max(MathF.Min(_layerOutput[nodeIndex] + _parameters[parameterOffset + layerSize * previousLayerSize + nodeIndex], 1), -1);
    }

    parameterOffset += layerSize * previousLayerSize + layerSize;

    Array.Copy(_layerOutput, _layerInput, layerSize);
  }

  int[] pieceValues = { 0, 1, 3, 3, 5, 9, 1000 };

  public MyBot()
  {
    for (int parameter = 0; parameter < 4927; parameter++)
    {
      var ints = decimal.GetBits(_compressedParameters[parameter / 16]);
      int bits = parameter % 16 * 6, bitsOffset = bits % 32, intIndex = bits / 32, quantized = ints[intIndex] >> bitsOffset & 0b111111;
      if (bitsOffset > 27) quantized |= ints[intIndex + 1] << 32 - bitsOffset & 0b111111;

      _parameters[parameter] = MathF.Pow(quantized / 64f - 0.5f, 3) * 6f;
    }
  }


  decimal[] _compressedParameters = { 50259359222811286604639433835M, 14511108148358133016888978410M, 20808695457523700956712983257M, 16388287107345755770676126551M, 22664053990611814328224262924M, 59539347313626059150360105935M, 31243893347117735219377530069M, 28157471723881269742884690866M, 54094186066480087207255391373M, 62211439273973624863613954768M, 66542563569350441876161725362M, 15780602785192648702404857783M, 53506373803947514683073439020M, 20674459523352662148582847566M, 54606929743697533053901783885M, 10081141216181663215753685327M, 12607297455266436460694396103M, 53271671242336232251702391049M, 11436831479613267948670600017M, 15074450978959983640244972034M, 63291867658363530617932230987M, 15654190268107377461147779918M, 58447629266474586608279128974M, 63974907654337656672146084976M, 17808904454977384471711112306M, 20498665488738438846104025808M, 23301843640966947696116455151M, 54106288463378814881689430631M, 15149718527846681233398281457M, 54888950208620817167020133208M, 59203265389518826078792143923M, 19599940570681847237273752109M, 14677534446917054561168313456M, 53534754406615390623156886474M, 21866027076775455618810344235M, 51145945379295477212865971492M, 57751367566505523067547390801M, 13914194237164025608543978866M, 44802862933287971732690846156M, 15150639634592892234578318163M, 25197036633003185652528904971M, 47120944742310550695857707856M, 3832655084450954223205024654M, 23147303045296485166247091072M, 52271035075154629331940874858M, 62811763253125826788386485294M, 26746183984493329495122836302M, 42812227121458764504721233045M, 59041090460592096023518462761M, 28816326937217879089245434449M, 52053064499293635216732121934M, 11396934257200762150620042188M, 22566116984454914216678038338M, 58243076519022685820619883023M, 35408707535177206030513317668M, 51194904341004897411960490730M, 21516807477662239344423752408M, 2830704997087806962277184342M, 20530333435125423844027163285M, 27676138771269974913576228395M, 57673269169382557014226214248M, 28912191143598952719120000618M, 28893150485827741581068412396M, 30083621578889129759572301589M, 21540599480494392585580037161M, 29273625584788305223086691740M, 27608048003397647753002944934M, 31321334421169742073012245802M, 21593876495185629159191102102M, 33051603771246227108518626855M, 56493371715768920521768553766M, 44013544614001588121243604760M, 25466741988524652310959315497M, 64879609056920246856237507288M, 52773780857324772376591153446M, 23824198726644281300286256162M, 52779947827095978495908564080M, 56100144464589483467100050793M, 60325925288954774960543579208M, 16524714148681181319631920237M, 13156500001698546214329056422M, 55318232808898626823705679339M, 32992283552363143476712144300M, 10002417050820150247011308462M, 16928234753842503612243829286M, 19504574105869376152693859626M, 12672797536328676066027664084M, 23087867279649220163194503474M, 13970734766686773226339918873M, 23185165373852136150894191984M, 28983171240057000946752097190M, 54097383816034254784400290447M, 7740866778012128367115334897M, 14645296445428263989014606213M, 29966627441334978128607032237M, 13313221597647954003121247213M, 53715984215939261121345032781M, 33741035754734986402704055060M, 57765733082630342013999701351M, 21920947606477660679756133293M, 17809719738646503581822827349M, 14579678970391986886821181784M, 15091572036297206826168484305M, 22431997609782756213883360629M, 54929439702716629176194624529M, 7643392601795978228900361201M, 52761034970167822246359143574M, 51649306916251411501180619541M, 23953886577297120447069506443M, 58923834879141132253885715558M, 54167062733985251057980500695M, 46176037754634890515280983475M, 58653844276748177252477897266M, 56147890760769968542007227727M, 46744997671504536397688253554M, 58318596968077985457426299798M, 59825743036060739747908729962M, 14465020730817836466754461037M, 75767063578649202149538762830M, 28228773913802508657800560137M, 54751718343543631231999223275M, 53584636975126298801035871183M, 56668606585778755542412653839M, 54153807314132624241674877990M, 11533340160343709811718940013M, 15288003474712638006211996760M, 25132575007076596043501626069M, 47918553214251942580048436527M, 52896049822488382304135590896M, 22663626909452122060738595987M, 57791856961009738655035753584M, 17673790319849897723623831891M, 49898633888285358336132937041M, 28709075557088118921554134289M, 63313002464388077207311892611M, 20159802228908741273822764432M, 54832857784388428969353489133M, 52075418493310925881511019081M, 59743197923189953764505242664M, 57210372668023024695030401718M, 56661213697575212997183962316M, 54252268175784935080614233190M, 16995916634466116744706093998M, 53954570011597378007359759249M, 14067860006063503704690592660M, 19064824684948612028964962830M, 55228478645860965335192912944M, 68568132723646368160337570382M, 52414885945157966809933491536M, 65219203813362236353385630601M, 72048582599060982320603249592M, 31396803692414446049023311506M, 64658586595323696651423505235M, 62279842862275466586231474924M, 18901348786019075877282939625M, 24211979544433777594593628883M, 43702421729160767097556507416M, 48442359927963394223329334645M, 58614105890982539727226860692M, 48004107446330875239502641648M, 20576709825865843276254342345M, 25140281911439450750817514836M, 21446264741668292089239136913M, 32654499510090909593145363475M, 17016123629072014616333462609M, 48603083822246719198063156119M, 26353176908336283715794027596M, 24386368232721787917146217175M, 57880550233644021486246773805M, 15237538570555773908117702034M, 59871949002892821732305075506M, 53515007783047383486180025196M, 32463158953757225957551649559M, 71457717307725782407639538844M, 16628086452386160107499476397M, 56047399978742582379595758169M, 51639000662537961281104049611M, 28061206616232527393856734324M, 54907050838641263552949590739M, 30228190328088410538520279912M, 53544147250454581750210295083M, 61603125582525897351773897879M, 15670619378262016058346630160M, 32656343440233696091000073520M, 23144640834412604810808904791M, 24016622138095339386022036748M, 54803226884857517154650870774M, 52820603096862710888449815756M, 28355023412041642301902435117M, 30664050038064062042347095159M, 50451382379686785275402314348M, 17133450392578583849182891509M, 51756469023904857712556221562M, 26949144100579432578898799149M, 22508293641065380486444583726M, 23765749854459213282319972784M, 55391052868713557866757039054M, 8933767397189807143881178063M, 34262037719753740736380722389M, 58992790160806489963343828016M, 16784652492275384199368068394M, 50510664723710360836675053297M, 16464739948569336804237801198M, 57820596947328302276794586096M, 61019712317944638728251069396M, 56040583728112304110825440588M, 21272070126048814232090262314M, 73757829160347558476360634373M, 52247725621263955269112610508M, 65955584658376807218410335281M, 28611987029046252409810678157M, 55327791603605622926994881493M, 23806047613522479412785523124M, 55248569891263859874196057172M, 24345232059351413360403977488M, 22635529205775627030710766222M, 17848999887546549368319706224M, 51405154088561994145839622829M, 18287216283594469266558622618M, 62674418429880821049171274922M, 48014034367258971225813357842M, 56553187419252488214692948595M, 50519285132769437494349564680M, 49138373601984760382198758576M, 17471420118040494689596004943M, 63440310452634701986623964243M, 13825039060010446289350988745M, 20028327565401093025790759948M, 63499502358171841738068274213M, 32914948052252571045654443142M, 51193317207398460919242976278M, 56102390688233686452849781206M, 50400607119318748957269476889M, 54824605190244697405398869161M, 55255269376797981983716837013M, 45035630282561797985642038760M, 27615083464349689131673692397M, 54037986075366242224617457259M, 53992235831144139584327285012M, 27607428570850223577448921750M, 56139626625210259447320574570M, 32599191315804839250007061654M, 22701300784770763058852758675M, 27724710084767135045582931688M, 23973087206809299888896912164M, 24378779734337054935128042157M, 30156448422645565783295202413M, 21873904182947322578624483497M, 57338521994231234236302660631M, 47886263363420810569707083483M, 50393565675367742033014658154M, 50265712425154785839091726810M, 50342890132185552032532429545M, 50008338852870142843375753687M, 22702921610604278385168788138M, 53687991548183260758860700444M, 55332725476188638866629622489M, 25488164061402975233953323544M, 47436240783147314573300808409M, 30507425634815347906344942041M, 31667621352076961555933202039M, 63915487013489415423929229866M, 65153144980171252319145462360M, 43780749557143129702547937819M, 54843697177533124048491570268M, 26473570760158871166649193581M, 30162894317070266196712596651M, 30418588647442242172224097302M, 53683775156608145160413812055M, 25270075497470086375756088658M, 51618004764891449747292128850M, 21445230858841072403843033686M, 51090916128493022064348166696M, 28873595526331371158514087573M, 47530946313318898420160580134M, 55114717108218916571387622617M, 52695691225266652243174544744M, 30566987242051128734656154258M, 49909801611395576869658985683M, 49137298084239509425453427307M, 47789240620051279688950781266M, 24300805198759543124848727269M, 56101489013706385280614692009M, 50341912606076806449428088294M, 51672036242334581156564612136M, 22732837112591732931916912088M, 27995899455936282832778656214M, 46474623740985684201110119783M, 28420747306353701717900888668M, 24307580191630462340306253241M, 29126552202468498655145538794M, 56106470613413825911589268203M, 20239742998502235117076698795M, 24281999406826540947068851413M, 48710817090363990337402796823M, 34288029330598383982120450281M, 32869685352664231259961416236M, 52702018041899368263146420714M, 21792901567858451722141346459M, 23069424086097312491914836818M, 48774918186329658491145987412M, 28826641199696916411876296099M, 54868502319480777497531467415M, 32952709444572839720322958871M, 52696961402350147397679217577M, 31692106692573174680120359515M, 42778626827887048481307728358M, 475525364472718758467176039M };

  // void DebugState(State state, int depth = 0)
  // {
  //   // if (depth == 2) return;

  //   Console.WriteLine(new string('\t', depth) + $"{state.Move} {Score(state)} {state.TotalScore} {state.Visits}");

  //   if (state.Children == null) return;

  //   foreach (State child in state.Children) DebugState(child, depth + 1);
  // }
}